/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as DashboardImport } from "./routes/dashboard"
import { Route as LoginImport } from "./routes/login"
import { Route as OrdersImport } from "./routes/orders"

// Create/Update Routes

const OrdersRoute = OrdersImport.update({
	id: "/orders",
	path: "/orders",
	getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
	id: "/login",
	path: "/login",
	getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
	id: "/dashboard",
	path: "/dashboard",
	getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/dashboard": {
			id: "/dashboard"
			path: "/dashboard"
			fullPath: "/dashboard"
			preLoaderRoute: typeof DashboardImport
			parentRoute: typeof rootRoute
		}
		"/login": {
			id: "/login"
			path: "/login"
			fullPath: "/login"
			preLoaderRoute: typeof LoginImport
			parentRoute: typeof rootRoute
		}
		"/orders": {
			id: "/orders"
			path: "/orders"
			fullPath: "/orders"
			preLoaderRoute: typeof OrdersImport
			parentRoute: typeof rootRoute
		}
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	"/dashboard": typeof DashboardRoute
	"/login": typeof LoginRoute
	"/orders": typeof OrdersRoute
}

export interface FileRoutesByTo {
	"/dashboard": typeof DashboardRoute
	"/login": typeof LoginRoute
	"/orders": typeof OrdersRoute
}

export interface FileRoutesById {
	__root__: typeof rootRoute
	"/dashboard": typeof DashboardRoute
	"/login": typeof LoginRoute
	"/orders": typeof OrdersRoute
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath
	fullPaths: "/dashboard" | "/login" | "/orders"
	fileRoutesByTo: FileRoutesByTo
	to: "/dashboard" | "/login" | "/orders"
	id: "__root__" | "/dashboard" | "/login" | "/orders"
	fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
	DashboardRoute: typeof DashboardRoute
	LoginRoute: typeof LoginRoute
	OrdersRoute: typeof OrdersRoute
}

const rootRouteChildren: RootRouteChildren = {
	DashboardRoute: DashboardRoute,
	LoginRoute: LoginRoute,
	OrdersRoute: OrdersRoute,
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard",
        "/login",
        "/orders"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/orders": {
      "filePath": "orders.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
